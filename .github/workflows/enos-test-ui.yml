---
name: Vault UI Tests

on:
  workflow_call:
    inputs:
      test_filter:
        type: string
        description: "A filter to limit the ui tests to. Will be appended to the ember test command as '-f=<filter>'"
        required: false
      vault_edition:
        type: string
        description: "The edition to test, either 'oss' or 'ent'"
        default: oss
      storage_backend:
        type: string
        description: "The storage backend to use, either 'raft' or 'consul'"
        default: raft
  push:
    branches:
      - mbaum/qt-304


jobs:
  # The 'setup-cluster' job provisions a vault cluster which is then used in the 'run-ui-tests' job.
  # The two phases have been split up this way in order to take advantage of caching. Caches are only
  # saved if a job succeeds, therefore combining the ui tests and the cluster setup into one job would
  # mean that the only time the cache would be saved and available to restore for the next run, would
  # be if the entire workflow succeeds. As the UI tests will likely fail more often than the cluster
  # setup, they are run in a subsequent job.
  setup-cluster:
    name: Set Up Vault Cluster
    runs-on: ubuntu-latest
    timeout-minutes: 60
    env:
      GITHUB_TOKEN: ${{ secrets.ELEVATED_GITHUB_TOKEN }}
      # Pass in enos variables
      ENOS_VAR_aws_region: us-east-1
      ENOS_VAR_aws_ssh_keypair_name: enos-ci-ssh-key # TODO: delete this and uncomment the next line
#      ENOS_VAR_aws_ssh_keypair_name: ${{ github.event.repository.name }}-ci-ssh-key
      ENOS_VAR_aws_ssh_private_key_path: ./support/private_key.pem
      ENOS_VAR_tfc_api_token: ${{ secrets.TF_API_TOKEN }}
      ENOS_VAR_terraform_plugin_cache_dir: ./support/terraform-plugin-cache
      ENOS_VAR_vault_license_path: ./support/vault.hclic
      ENOS_VAR_ui_run_tests: false
      NODE_VERSION: 16
    steps:
      - uses: actions/checkout@v3
      - name: Get metadata
        id: get-metadata
        run: |
          echo "go-version=$(cat ./.go-version)" >> $GITHUB_OUTPUT
      - name: Set Up Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ steps.get-metadata.outputs.go-version }}
      - id: go-cache-paths
        run: |
          echo "::set-output name=go-build::$(go env GOCACHE)"
          echo "::set-output name=go-mod::$(go env GOMODCACHE)"
      - name: Go Build Cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.go-cache-paths.outputs.go-build }}
          key: ${{ runner.os }}-go-build-${{ hashFiles('**/go.sum') }}
      - name: Go Mod Cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.go-cache-paths.outputs.go-mod }}
          key: ${{ runner.os }}-go-mod-${{ hashFiles('**/go.sum') }}
      - uses: hashicorp/setup-terraform@v2
        with:
          # the Terraform wrapper will break Terraform execution in Enos because
          # it changes the output to text when we expect it to be JSON.
          terraform_wrapper: false
      - uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          role-skip-session-tagging: true
          role-duration-seconds: 3600
      - uses: hashicorp/action-setup-enos@v1
        with:
          github-token: ${{ secrets.ELEVATED_GITHUB_TOKEN }}
      - name: Prepare scenario dependencies # TODO: update SSH KEY SECRET
        run: |
          mkdir -p ./enos/support/terraform-plugin-cache
          echo "${{ secrets.ENOS_CI_SSH_KEY }}" > ./enos/support/private_key.pem
          chmod 600 ./enos/support/private_key.pem
      - name: Set Up Git
        run: git config --global url."https://${{ secrets.elevated_github_token }}:@github.com".insteadOf "https://github.com"
      - name: node_modules Cache
        id: node-modules-cache
        uses: actions/cache@v2
        with:
          path: ui/node_modules
          key: ${{ runner.os }}-${{ env.NODE_VERSION }}-nodemodules-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ env.NODE_VERSION }}-nodemodules-
        # Since we've split the workflow into two jobs, we're caching the Terraform configuration,
        # including the state so that it can be restored in the 'run-ui-tests' job. Doing so is
        # necessary in order to avoid creating another cluster in the 'run-ui-tests' job. Additionally,
        # it means that we do not need to run init again either since all the providers and modules
        # have already been downloaded and will also be included in the cache.
      - name: UI-Ember Scenario Cache
        id: ui-ember-cache
        uses: actions/cache@v2
        with:
          path: enos/.enos
          # The cache key includes the run_id of this run, therefore this cache will only be used in
          # jobs of this run.
          key: ui-ember-${{ github.run_id }}
      - name: Set Up Vault Enterprise License
        if: contains(${{ github.event.repository.name }}, 'ent')
        run: echo "${{ secrets.VAULT_LICENSE }}" > ./enos/support/vault.hclic || true
      - name: Run Enos scenario
        id: run
        # Continue once and retry to handle occasional blips when creating
        # infrastructure.
        continue-on-error: true
        run: enos scenario launch --timeout 60m0s --chdir ./enos ui edition:oss backend:raft # TODO: delete this
#        run: enos scenario run --timeout 60m0s --chdir ./enos ui edition:${{ inputs.vault_edition }} backend:${{ inputs.storage_backend }}
      - name: Retry Enos scenario if necessary
        id: run_retry
        if: steps.run.outcome == 'failure'
        run: enos scenario launch --timeout 60m0s --chdir ./enos ui edition:oss backend:raft # TODO: delete this
#        run: enos scenario run --timeout 60m0s --chdir ./enos ui edition:${{ inputs.vault_edition }} backend:${{ inputs.storage_backend }}
      - name: Ensure scenario has been destroyed
        if: steps.run.outcome == 'failure' || steps.run_retry.outcome == 'failure'
        # With Enos version 0.0.11 the destroy step returns an error if the infrastructure
        # is already destroyed by enos run. So temporarily setting it to continue on error in GHA
        continue-on-error: true
        run: enos scenario destroy --timeout 60m0s --chdir ./enos ui edition:oss backend:raft # TODO: delete this
#        run: enos scenario destroy --timeout 60m0s --chdir ./enos ui edition:${{ inputs.vault_edition }} backend:${{ inputs.storage_backend }}
      - name: Clean up Enos runtime directories
        if: ${{ always() }}
        run: |
          rm -rf /tmp/enos*
          rm -rf ./enos/support
          rm -rf ./enos/.enos

  run-ui-tests:
    needs: setup-cluster
    name: Run UI Tests
    runs-on: ubuntu-latest
    timeout-minutes: 60
    env:
      GITHUB_TOKEN: ${{ secrets.ELEVATED_GITHUB_TOKEN }}
      # Pass in enos variables
      ENOS_VAR_aws_region: us-east-1
      ENOS_VAR_aws_ssh_keypair_name: enos-ci-ssh-key # TODO: delete this and uncomment the next line
#      ENOS_VAR_aws_ssh_keypair_name: ${{ github.event.repository.name }}-ci-ssh-key
      ENOS_VAR_aws_ssh_private_key_path: ./support/private_key.pem
      ENOS_VAR_tfc_api_token: ${{ secrets.TF_API_TOKEN }}
      ENOS_VAR_terraform_plugin_cache_dir: ./support/terraform-plugin-cache
      ENOS_VAR_vault_license_path: ./support/vault.hclic
      NODE_VERSION: 16
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Configure AWS credentials from Test account
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          role-skip-session-tagging: true
          role-duration-seconds: 3600
      - uses: hashicorp/action-setup-enos@v1
        with:
          github-token: ${{ secrets.ELEVATED_GITHUB_TOKEN }}
      - name: Set Up Node
        uses: actions/setup-node@v2
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: node_modules Cache
        id: node-modules-cache
        uses: actions/cache@v2
        with:
          path: ui/node_modules
          key: ${{ runner.os }}-${{ env.NODE_VERSION }}-nodemodules-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ env.NODE_VERSION }}-nodemodules-
      - name: UI-Ember Scenario Cache
        id: ui-ember-cache
        uses: actions/cache@v2
        with:
          path: enos/.enos
          # The cache key includes the run_id of this run, therefore this cache will only be used in
          # jobs of this run.
          key: ui-ember-${{ github.run_id }}
      - name: Set Up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
      - name: Prepare scenario dependencies # TODO: update SSH KEY SECRET
        run: |
          mkdir -p ./enos/support/terraform-plugin-cache
          echo "${{ secrets.ENOS_CI_SSH_KEY }}" > ./enos/support/private_key.pem
          chmod 600 ./enos/support/private_key.pem
      - name: Set Up Vault Enterprise License
        if: contains(${{ github.event.repository.name }}, 'ent')
        run: echo "${{ secrets.VAULT_LICENSE }}" > ./enos/support/vault.hclic || true
      - name: Run Enos scenario
        id: run
        # Continue once and retry to handle occasional blips when creating
        # infrastructure.
        continue-on-error: true
        run: enos scenario run --timeout 60m0s --chdir ./enos ui edition:oss backend:raft # TODO: delete this
#        run: enos scenario run --timeout 60m0s --chdir ./enos ui edition:${{ inputs.vault_edition }} backend:${{ inputs.storage_backend }}
      - name: Retry Enos scenario if necessary
        id: run_retry
        if: steps.run.outcome == 'failure'
        run: enos scenario run --timeout 60m0s --chdir ./enos ui edition:oss backend:raft # TODO: delete this
#        run: enos scenario run --timeout 60m0s --chdir ./enos ui edition:${{ inputs.vault_edition }} backend:${{ inputs.storage_backend }}
      - name: Ensure scenario has been destroyed
        if: ${{ always() }}
        # With Enos version 0.0.11 the destroy step returns an error if the infrastructure
        # is already destroyed by enos run. So temporarily setting it to continue on error in GHA
        continue-on-error: true
        run: enos scenario destroy --timeout 60m0s --chdir ./enos ui edition:oss backend:raft # TODO: delete this
#        run: enos scenario destroy --timeout 60m0s --chdir ./enos ui edition:${{ inputs.vault_edition }} backend:${{ inputs.storage_backend }}
      - name: Clean up Enos runtime directories
        if: ${{ always() }}
        run: |
          rm -rf /tmp/enos*
          rm -rf ./enos/support
          rm -rf ./enos/.enos
